#include<stdio.h>
#include<string.h>
#define INFINITY 9999
#define MAX 30
char map[20][25]={"Arad", "Bucharest","Craiova","Dobreta","Eforie","Fagaras","Giurgiu",
"Hirsova","Iasi","Lugoj","Mehadia","Neamt","Oradea","Pitesti",
"Rimnicu Vilcea","Sibiu","Timisoara","Urziceni","Vaslui","Zerind"};
char start[25];
void dijkstra(int G[MAX][MAX],int n,int startnode) {
    int cost[MAX][MAX],distance[MAX],pred[MAX];
    int visited[MAX],count,mindistance,nextnode,i,j;
    // Create the cost matrix
    for(i=0;i<n;i++) {
        for(j=0;j<n;j++) {
            if(G[i][j]==0)
                cost[i][j]=INFINITY;
            else
                cost[i][j]=G[i][j];
        }
    }
    // Initialize pred[], distance[], and visited[]
    for(i=0;i<n;i++) {
        distance[i]=cost[startnode][i];
        pred[i]=startnode;
        visited[i]=0;
    }
    distance[startnode]=0;
    visited[startnode]=1;
    count=1;

    while(count<n-1) {
        mindistance=INFINITY;
        // nextnode stores the node with minimum distance
        for(i=0;i<n;i++) {
            if(distance[i]<mindistance&&!visited[i]) {
                mindistance=distance[i];
                nextnode=i;
            }
        }

        // Check if a better path exists through nextnode
        visited[nextnode]=1;
        for(i=0;i<n;i++) {
            if(!visited[i]) {
                if(mindistance+cost[nextnode][i]<distance[i]) {
                    distance[i]=mindistance+cost[nextnode][i];
                    pred[i]=nextnode;
                }
            }
        }
        count++;
    }

    // Print the path and distance of each node
    for(i=0;i<n;i++) {
        if(i!=startnode) {
            printf("\n\nShortest Distance from %s to %s=%d",start,map[i],distance[i]);
            printf("\nPath=%s",map[i]);
            j=i;
            do {
                j=pred[j];
                printf("<-%s",map[j]);
            } while(j!=startnode);
        }
    }
}

int main() {
    int G[MAX][MAX],i,j,n,u;

    printf("Enter no. of vertices:");
    scanf("%d",&n);
    printf("\nEnter the adjacency matrix:\n");
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
            scanf("%d",&G[i][j]);

    printf("\nEnter the starting node:");
    scanf("%s",start);
    for(i=0;i<20;i++) {
        if(!strcmp(map[i],start)) {
            u=i;
            break;
        }
    }
    dijkstra(G,n,u);
    return 0;
}
